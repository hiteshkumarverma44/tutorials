<?php

/**
 * @file
 * Primary module hooks for jackson module.
 *
 *
 * Implements hooke_entity_view().
 * its a generic hook
 */

function jackson_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{

    if ($entity->getEntityType()->id() == 'node') {
        $build['awesome'] = [
            '#markup' => '<marquee>This is awesome</marquee>',
            '#allowed_tags' => ['marquee'],
        ];
    }
}


/**
 * the above is the generic hook and the below is the more specific hook ie. only for the node and we dont required the if condition.
 */

// function jackson_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
// {

//     $build['awesome'] = [
//         '#markup' => '<h1>This is awesome</h1>',
//         '#allowed_tage' => ['h1'],
//     ];
// }




/**
 * Implements hook_help().
 *
 * When implementing a hook you can use the standard "Implements HOOK_NAME."
 * format as the docblock for the function. This is an indicator that further
 * documentation for the function parameters can be found in the docblock for
 * the hook being implemented and reduces duplication.
 *
 * This function is an implementation of hook_help(). Following the naming
 * convention for hooks, the "hook_" in hook_help() has been replaced with the
 * short name of our module, "hooks_example_" resulting in a final function name
 * of hooks_example_help().
 */
function jackson_help($route_name,  \Drupal\Core\Routing\RouteMatchInterface $route_match)
{
    switch ($route_name) {
            // The name of the route, from hooks_example.routing.yml that you want to
            // display the help text on.
        case 'entity.node.canonical':
            return '<p>' . t('This text is provided by the function hooks_example_help(), which is an implementation of the hook hook_help().') . '</p>';
    }
}


/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Some hook names include additional tokens that need to be replaced when
 * implementing the hook. These hooks are dynamic in that when they are being
 * invoked a portion of their name is replaced with a dynamic value. This is
 * indicated by placing the token words in all caps. This pattern is often used
 * in situations where you want to allow modules to generically act on all
 * instances of a thing, or to act on only a specific subset.
 *
 * There are lots of different entity types in Drupal: Node, user, file, etc.
 * Using hook_entity_view() a module can act on a any entity that is being
 * viewed, regardless of type. If we wanted to count views of all entities,
 * regardless of type this would be a good choice. This variant is also useful
 * if you want to provide administrators with a form where they can choose from
 * a list of entity types which ones they want to count views for. The logic in
 * the generic hook implementation could then take that into account and act on
 * only a select set of entity types.
 *
 * If however, you know you only ever want to act on viewing of a node entity
 * you can instead implement hook_ENTITY_TYPE_view(). Where ENTITY_TYPE is a
 * token that can be replaced with any valid entity type name.
 */


function jackson_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
    // This example hook implementation keeps track of the number of times a user
    // has viewed a specific node during their current session, then displays that
    // information for them when they view a node.
    //
    // In addition, a hook is invoked that allows other modules to react when the
    // page view count is updated.

    // Retrieve the active session from the current request object.
    $session = \Drupal::request()->getSession();
    $current_counts = $session->get('jackson.view_counts', array());
    if (!isset($current_counts[$entity->id()])) {
        // If this is the first time they've viewed the page we need to start the
        // counter.
        $current_counts[$entity->id()] = 1;
    } else {
        // If they have already viewed this page just increment the existing
        // counter.
        $current_counts[$entity->id()]++;
    }

    // Save the updated values.

    $session->set('jackson.view_counts', $current_counts);

    // dump($current_counts);
    echo "<pre>";
    print_r($current_counts);
    echo "</pre>";


    foreach ($current_counts as $value) {
        $build['awesomeOne'] = [
            '#markup' => $value,

        ];
    }
}
